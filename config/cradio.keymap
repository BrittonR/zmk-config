/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "trankillity.h"

&lt {
    tapping-term-ms = <130>;
    flavor = "tap-preferred";
};

&sk {
     release-after-ms = <300>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lm: layer_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to>;
        };
        ss: sticky_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <130>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sk>;
        };
        sb: space_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "SPACE_BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp SPC>, <&kp BKSP>;
            mods = <(MOD_LSFT|MOD_LCTL|MOD_LALT|MOD_RSFT|MOD_RCTL|MOD_RALT)>;
        };
    };

    combos {
        #include "combos.dtsi"
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
                        bindings = <
    &kp Q       &kp W       &kp F       &kp P       &kp B              &kp J       &kp L       &kp U       &kp Y       &kp SQT 
    &hm X_A     &hm X_R     &hm X_S     &hm X_T     &kp G              &kp M       &hm X_N     &hm X_E     &hm X_I     &hm X_O   
    &kp Z       &kp X       &kp C       &kp D       &kp V              &kp K       &kp H       &mt QMARK COMMA    &mt EXCL DOT     &mt BSLH FSLH
                                        &kp LSHIFT &sb        &lt NUM_BCK &lt NAV_ENT
                        >;
                };
        numpad_layer {
                        bindings = <
    &none       &none       &none       &none       &none               &kp KP_PLUS    &kp N7      &kp N8      &kp N9      &kp KP_MULTIPLY     
    &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none               &kp N0  &kp N4      &kp N5      &kp N6      &kp KP_DOT
    &none       &none       &none       &none       &tog _FUNC          &kp KP_MINUS &kp N1      &kp N2      &kp N3      &kp KP_DIVIDE  
                                        &to _BASE      &trans              &kp KP_EQUAL    &lt NAV_ENT
                        >;
                };
        function_layer {
                        bindings = <
    &none       &none       &none       &none       &none              &none       &kp F7      &kp F8      &kp F9      &kp F12
    &kp LGUI    &kp LALT    &kp LCTRL   &kp LSHFT   &none              &none       &kp F4      &kp F5      &kp F6      &kp F11
    &none       &none       &none       &none       &tog _FUNC         &none       &kp F1      &kp F2      &kp F3      &kp F10
                                        &to _BASE      &trans             &mo _SYST   &trans
                        >;
                };
        nav_layer {
                        bindings = <
    &kp TAB     &kp HOME    &kp UP      &kp END     &kp PG_UP          &kp K_MUTE   &none       &none       &none       &none     
    &kp X_SELA  &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_DN          &kp C_VOL_UP &kp LEFT &kp UP &kp DOWN  &kp RIGHT  
    &kp X_UNDO  &kp X_CUT   &kp X_COPY  &kp X_PAST  &kp X_REDO         &kp C_VOL_DN &kp C_PREV  &kp C_PP    &kp C_NEXT  &kp C_STOP
                                        &to _BASE      &mo _SYST          &trans       &trans
                        >;
                };
        system_layer {
                        bindings = <
    &bootloader     &none           &out OUT_USB    &out OUT_BLE        &bt BT_CLR         &bt BT_CLR       &out OUT_BLE    &out OUT_USB    &none           &bootloader
    &none           &bt BT_SEL 2    &bt BT_SEL 1    &bt BT_SEL 0        &none              &none            &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &none
    &reset          &none           &none           &none               &none              &none            &none           &none           &none           &reset
                                                    &trans              &trans             &trans           &trans
                        >;
                };
        };
};
